#################################################
# Parallelization: np_braid * np_init = MPIsize
#################################################
// Size of communicator distributing initial conditions (ninit MOD np_init == 0 !)
np_init = 2

##################
# Testcase 
##################
// Number of levels for each oscillator.
nlevels = 2, 2
// Number of time steps
ntime = 1000
// Time step size (ns)
dt = 0.1
// Number of spline function per oscillator, for both real and imaginary part (total number of design variables will be 2*nspline*noscillators).
nspline = 150
// Drift Hamiltonian frequencies xi for all oscillators and their coupling terms, in Ghz -> will be multiplied by 2*PI (radian)
// Format: x = [x_00, x_01, x_02,...,x_11, x_12,....]. -> number of elements here should be (noscillators+1)*noscillators/2 !
xi = 0.2198, 0.1, 0.2252
// Internal frequencies per oscillator (in Ghz, will be multiplied by 2*PI for angular frequencies)
frequencies = 4.10595, 4.81526
// Carrier wave frequencies. One line per oscillator 0..Q-1. In Ghz, will be multiplied by -2*PI
carrier_frequency0 = 0.0, 0.2198, 0.1
carrier_frequency1 = 0.0, 0.2252, 0.1
// Lindblad collapse type: "none", "decay", "dephase" or "both"
lindblad_type = both
// Collapse times T1, T2 (in ns) per oscillator (gamma_l = 1/T_l, l=1,2). Format [T1_oscil1, T2_oscli1, T1_oscil2, T2_oscil2, ...]
lindblad_collapsetime = 56000, 28000, 56000, 28000
// Target gate: "none", "xgate", "ygate", "zgate", "hadamard", "cnot", or "groundstate"
gate_type = groundstate

##################
# Braid options 
##################
// Maximum  number of time grid levels (maxlevels = 1 runs sequential forward simulation, e.g. no braid)
braid_maxlevels = 1
// Coarsening factor
braid_cfactor = 5
// Level of braid screen output. 0 - no output, 1 - convergence history, higher numbers: compare with xbraid doc
braid_printlevel = 1
// Maximum number of braid iterations per optimization cycle
braid_maxiter = 20
// Absolute stopping tolerance
braid_abstol = 1e-5
// Relative stopping tolerance
braid_reltol = 1e-4
// Turn on/off full multigrid cycle. This is costly, but convergence typically improves.
braid_fmg     = true
// Skip computation on first downcycle
braid_skip    = false
// Decide how often the state will be written to a file. 0 - never, 1 - once after each braid run // TODO: only after optimization finishes
braid_accesslevel = 1

#######################
# Optimization options 
#######################
// Optimization stopping tolerance (absolute)
optim_tol     = 1e-5
// Maximum number of optimization iterations
optim_maxiter = 80
// Coefficient of Tikhonov regularization for the design variables (gamma/2 || design ||^2)
optim_regul   = 0.001
// Initial design variables: "zero" inits with 0, "random" inits random but uses fixed seed, "random_seed" inits random but with random seed, or "/path/to/file/" to read from file. or "constant", then 'optim_init_const' gives the initial amplitudes per oscillator. Here 2*pi and 2*2*pi.
optim_init = constant
optim_init_const = 6.283, 12.566
// Max. absolut values for the control function amplitudes for each oscillator
optim_bounds = 0.05, 0.15
// Level of optimization output 0 = no output, 1 = optimization history, initial & optimized controls, 2 = 1 + controls in each iteration
optim_printlevel = 1
// Specify the objective function: "gate" - compares to the linear gate transformation, "expected" - minimizes the expected value of energy level for the FIRST oscillator
optim_objective = expected


######################
# Output and runtypes
######################
// Directory for output files
datadir = ./data_out
// Specify the desired output for each oscillator (list of options: "expectedEnergy" - expected energy level, "population" - population (diagonal of reduced density matrix)
output0 = population,expectedEnergy
output1 = none
// Runtype options: "primal" - forward simulation only, "adjoint" - forward and backward, or "optimization" - run optimization
runtype = optimization
// Initial conditions: "all" - basis of N^2 unit vectors, "diagonal" - N unit vectors corresponding to diagonal of density matrix,or  "/path/to/file"  - read one specific initial condition from file (Format: one column of length 2N^2 containing vectorized density matrix, first real part, then imaginary part), or "unit" - specify the unit vector numbers in 'init_unit' for each oscillator
initialcondition = all
#initialcondition = unit
#init_unit = 1,0
// Use Petsc's timestepper, or use home-brewed time stepper (-> MidPointRule)
usepetscts = false
// Switch for monitoring Petc's timestepper
monitor = false
