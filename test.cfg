#################################################
# Parallelization: np_braid * np_init = MPIsize
#################################################
np_init = 9
np_braid = 1

##################
# Testcase 
##################
// Number of levels for each oscillator.
nlevels = 3,10
// Number of time steps
ntime = 10
// Time step size (ns)
dt = 0.0001
// Number of spline function per oscillator, for both real and imaginary part (total number of design variables will be 2*nspline*noscillators).
nspline = 30
// Drift Hamiltonian frequencies xi for all oscillators and their coupling terms, in Ghz -> will be multiplied by 2*PI
// Format: x = [x_00, x_01, x_02,...,x_11, x_12,....]. -> number of elements here should be (noscillators+1)*noscillators/2 !
xi = 225.6, 1, 0.0
// Internal frequencies per oscillator (in Ghz, will be multiplied by 2*PI)
frequencies = 4099.47, 7076.8 
// Carrier wave frequencies. One line per oscillator 0..Q-1. In Ghz, will be multiplied by -2*PI
carrier_frequency0 = 0.0, 225.6
carrier_frequency1 = 0.0
// Lindblad collapse type: "none", "decay", "dephase" or "both"
lindblad_type = decay
// Collapse times T1, T2 (in ns) per oscillator (gamma_l = 1/T_l, l=1,2). Format [T1_oscil1, T2_oscli1, T1_oscil2, T2_oscil2, ...]
lindblad_collapsetime = 30.0, 0.0, 0.1136, 0.0  
#lindblad_collapsetime = 0.0, 0.0, 0.0, 0.0  

##################
# Braid options 
##################
// Maximum  number of time grid levels (maxlevels = 1 runs sequential forward simulation, e.g. no braid)
braid_maxlevels = 1
// Coarsening factor
braid_cfactor = 2
// Level of braid screen output. 0 - no output, 1 - convergence history, higher numbers: compare with xbraid doc
braid_printlevel = 0
// Maximum number of braid iterations per optimization cycle
braid_maxiter = 2
// Absolute stopping tolerance
braid_abstol = 1e-5
// Relative stopping tolerance
braid_reltol = 1e-4
// Turn on/off full multigrid cycle. This is costly, but convergence typically improves.
braid_fmg     = false
// Skip computation on first downcycle
braid_skip    = false
// Decide how often the state will be written to a file. 0 - never, 1 - once after each braid run // TODO: only after optimization finishes
braid_accesslevel = 0

#######################
# Optimization options 
#######################
// Optimization stopping tolerance (absolute)
optim_aol     = 1e-5
optim_rtol     = 1e-5
// Maximum number of optimization iterations
optim_maxiter = 2
// Coefficient of Tikhonov regularization for the design variables (gamma/2 || design ||^2)
optim_regul   = 0.0
// Initial design variables: "zero" inits with 0, "random" inits random but uses fixed seed, "random_seed" inits random but with random seed, or "/path/to/file/" to read from file. or "constant", then 'optim_init_const' gives the initial amplitudes per oscillator.
#optim_init = ./cnot_coef_reorder.dat
optim_init = constant
optim_init_const = 1.55500902, 8.88576587
#optim_init_const = 1.0, 2.0
// Max. absolut values for the control function amplitudes for each oscillator
optim_bounds = 50.0, 150.0
// Level of optimization output 0 = no output, 1 = optimization history, initial & optimized controls, 2 = 1 + controls in each iteration
optim_printlevel = 0
// Specify the objective function: "gate, <type>" where <type> can be "cnot", "xgate", "ygate", "zgate" or "hadamard": compares final state to gate-transformed initial conditions. "expectedEnergy" minimizes expected energy levels of (full or reduced) density matrix. Or "groundstate" compares (full or reduced) density matrix to groundstate density matrix.
#optim_objective = gate, cnot
optim_objective = expectedEnergy
#optim_objective = groundstate
// Specify the oscillator ID's that are considered by the objective function. Either "all" or a list of consecutive integers, e.g. 0,1,2, or 3,4. (If objective function is expectedEnergy, then objective is a sum over the expected Energy level of each of those oscillators (individually).
optim_oscillators = all
// Initial conditions: 
// "file, /path/to/file"  - read one specific initial condition from file (Format: one column of length 2N^2 containing vectorized density matrix, first real part, then imaginary part), 
// "pure, <list, of, unit, vecs, per, oscillator>" for a kronecker product of basis vectors, e.g. "pure, 1,0" uses the pure state |1> \otimes |0> as initial state
// "diagonal, <list, of, oscillator, IDs>" - all unit vectors that correspond to the diagonal of the (full or reduced) density matrix for the subsystem defined by the list of oscillator IDs.
// "basis, <list, of, oscillator, IDs>" - basis of Hermetian matrices for the (full or reduced) density matrix for the subsystem defined by the list of oscillator IDs.
#initialcondition = diagonal, 0
initialcondition = pure, 2,0
#initialcondition = basis, 0
#initialcondition = file, ./initcond/AxC_rho1_notebook.dat
#initialcondition = file, ./initcond/test2x2.dat


######################
# Output and runtypes
######################
// Directory for output files
datadir = ./data_out
// Specify the desired output for each oscillator (list of options: "expectedEnergy" - expected energy level, "population" - population (diagonal of reduced density matrix), "fullstate" - full density matrix of the coupled system (can appear in any of the oscillators)
output0 = expectedEnergy, fullstate
output1 = expectedEnergy
// Runtype options: "primal" - forward simulation only, "adjoint" - forward and backward, or "optimization" - run optimization
runtype = adjoint
#runtype = primal
// Use matrix free solver 
usematfree = true
#usematfree = false
// Use Petsc's timestepper, or use home-brewed time stepper (-> MidPointRule)
usepetscts = false
// Switch for monitoring Petc's timestepper
monitor = false
// Decide to use either Petsc's GMRES solver (true), or Neumann series iterations to solve the linear system (false)
usegmres = true
